{"version":3,"sources":["main.js"],"names":["scrollUp","document","getElementById","_this","scrollY","classList","add","remove","window","sections","scrollActive","pageYOffset","addEventListener","sectionHeight","current","offsetHeight","sectionTop","querySelectorAll","sectionId","getAttribute","forEach","offsetTop","sectionsClass","darkTheme","iconTheme","selectedTheme","localStorage","getItem","selectedIcon","getCurrentTheme","body","contains","getCurrentIcon","themeButton","toggle","setItem","sendEmail","e","preventDefault","then","textContent","contactMessage","contactForm","reset","sr","ScrollReveal","distance","setTimeout","reveal","origin"],"mappings":"8BACMA,SAAW,WACb,IAAMA,EAAWC,SAASC,eAAe,aACzB,KAAhBC,MAAKC,QAAiBJ,EAASK,UAAUC,IAAI,eAAiBN,EAASK,UAAUE,OAAO,gBAF5FC,OAAMR,iBAAW,SAAAA,UAEb,IAAAS,SAAAR,SAAsBD,iBAAA,eAF1BU,aAAA,WAQI,IAAMN,EAAUI,OAAOG,YAJ3BH,SAAOI,QAAAA,SAAAA,GAMC,IAAMC,EAAgBC,EAAQC,aAJxBC,EAAYC,EAAAA,UAAiB,GAM/BC,EAAYJ,EAAQK,aAAa,MALvCT,EAAAA,SAAAA,cAAqB,sBAAAQ,EAAA,KACDF,EAAhBZ,GAANA,GAAAY,EAAAH,EACSO,EAAQf,UAAOC,IAAI,eAEpBU,EAAaF,UAAQO,OADzB,kBAIAb,OAAAI,iBAAcI,SAAcZ,cAGxBkB,IAAAA,YAAcjB,SAAdH,eAA+B,gBAClCqB,UAAA,aATLC,UAAA,SAFJC,cAAAC,aAAAC,QAAA,kBAqBMC,aAAeF,aAAaC,QAAQ,iBAL1CE,gBAAA,WAAA,OAAA5B,SAAA6B,KAAAzB,UAAA0B,SAAAR,WAAA,aAAA,IAQMS,eAAiB,WAAA,OAAMC,YAAY5B,UAAU0B,SAASP,WAAa,SAAW,IAN9ED,gBACAC,SAASM,KAAGzB,UAAlB,eAAAoB,cAAA,MAAA,UAAAF,WACME,YAAAA,UAAqC,WAArBC,aAAqB,MAA3C,UAAAF,YAGAS,YAAMJ,iBAAkB,QAAlBA,WAAN5B,SAAA6B,KAAAzB,UAAA6B,OAAAX,WAWIU,YAAY5B,UAAU6B,OAAOV,WAVVE,aAAMO,QAAY5B,iBAAmBmB,mBAC5DE,aAAAS,QAAA,gBAAAH,oBAEI/B,IAAAA,YAAcI,SAAUoB,eAAkB,gBAC1CQ,eAAsBL,SAAAA,eAAA,mBAE1BQ,UAAA,SAAAC,GAcIA,EAAEC,iBAbNL,QAAYrB,SAAAA,kBAA0B,mBAAM,gBAAA,qBACxC2B,KAAA,WAEAN,eAAAO,YAA6BhB,8BAE7BE,WAAaS,WAAQM,eAArBD,YAAuCX,IAAvC,KAIJa,YAAAC,SAcM,WAZEF,eAAiBxC,YAASC,wCAE9BmC,YAAEC,iBACF,SAAAF,WAGI,IAAAQ,GAAAC,aAAA,CACAJ,OAAAA,MAeJK,SAAU,OAbNC,SAAU,KAAON,MAAAA,MAGpBG,GARDI,OAQE,mBAAI,CAAAC,OAAA,SACFL,GAAAI,OAAA,mBAAA,CAAAC,OAAA,UACAR,GAAAA,OAAAA","file":"main.min.js","sourcesContent":["// show scroll up\r\nconst scrollUp = () => {\r\n    const scrollUp = document.getElementById('scroll-up')\r\n    this.scrollY >= 350 ? scrollUp.classList.add('show-scroll') : scrollUp.classList.remove('show-scroll')\r\n}\r\nwindow.addEventListener('scroll', scrollUp)\r\n//scroll sections active link\r\nconst sections = document.querySelectorAll('section[id]')\r\nconst scrollActive = () => {\r\n    const scrollY = window.pageYOffset\r\n    sections.forEach(current => {\r\n        const sectionHeight = current.offsetHeight,\r\n            sectionTop = current.offsetTop - 58,\r\n            sectionId = current.getAttribute('id'),\r\n            sectionsClass = document.querySelector('.nav__menu a[href*=' + sectionId + ']')\r\n        if (scrollY > sectionTop && scrollY <= sectionTop + sectionHeight) {\r\n            sectionsClass.classList.add('active-link')\r\n        } else {\r\n            sectionsClass.classList.remove('active-link')\r\n        }\r\n    })\r\n}\r\nwindow.addEventListener('scroll', scrollActive)\r\n//Previously selected topic (if user selected)\r\n// dark light theme\r\nconst themeButton = document.getElementById('theme-button')\r\nconst darkTheme = 'dark-theme'\r\nconst iconTheme = '--dark'\r\nconst selectedTheme = localStorage.getItem('selected-theme')\r\nconst selectedIcon = localStorage.getItem('selected-icon')\r\n//we obtain the current theme that the interface has by validating the dark-theme class\r\nconst getCurrentTheme = () => document.body.classList.contains(darkTheme) ? 'dark-theme' : ''\r\nconst getCurrentIcon = () => themeButton.classList.contains(iconTheme) ? '--dark' : ''\r\n//we validate if the user previously chose a topic\r\nif (selectedTheme) {\r\n    document.body.classList[selectedTheme === 'dark-theme' ? 'add' : 'remove'](darkTheme)\r\n    themeButton.classList[selectedIcon === '--dark' ? 'add' : 'remove'](iconTheme)\r\n}\r\n//activate / deactivate the theme manually with the button\r\nthemeButton.addEventListener('click', () => {\r\n    //add or remove the dark / icon theme\r\n    document.body.classList.toggle(darkTheme)\r\n    themeButton.classList.toggle(iconTheme)\r\n    //we save the theme and the current icon that the user chose\r\n    localStorage.setItem('selected-theme', getCurrentTheme())\r\n    localStorage.setItem('selected-icon', getCurrentIcon())\r\n})\r\n\r\n// email js\r\nconst contactForm = document.getElementById('contact-form'),\r\n        contactMessage = document.getElementById('contact-message')\r\nconst sendEmail = (e)=>{\r\n    e.preventDefault()\r\n    // serviceID - templateID - #form - publickey\r\n    emailjs.sendForm('service_rozcgws','template_bcg648v','#contact-form','zUR-LeVb5ffUCEgBO')\r\n    .then(()=>{\r\n        // show sent message\r\n        contactMessage.textContent = 'Message sent successfully ✅'\r\n        //Remove message after five seconds\r\n        setTimeout(() =>{contactMessage.textContent = ''}, 5000)\r\n        //clear input field\r\n        contactForm.reset()\r\n    },()=>{\r\n        // show error message\r\n        contactMessage.textContent = 'Message not sent (service error) ❌'\r\n    })\r\n}\r\ncontactForm.addEventListener('submit', sendEmail)\r\n\r\n//scroll reveal animation\r\nconst sr = ScrollReveal({\r\n    origin: 'top',\r\n    distance: '60px',\r\n    duration: 2500,\r\n    delay: 200,\r\n    //reset: true // Animation repeat\r\n})\r\n \r\n sr.reveal('.home__hero-blob', {origin: 'left'})\r\n sr.reveal('.home__hero-text', {origin: 'right'})\r\n sr.reveal('.home__resume-left, .home__resume-right, .footer__wrapper')"]}